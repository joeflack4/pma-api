plot(n_per_sheet, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(3600, 180, 450, 90, 7200, 900, 1800, 360, 14402)
seconds <- c(51, 10, 15, 9, 87, 16, 25, 11, 167)
plot(n_per_sheet, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(9, 10, 11, 15, 16, 25, 51, 87, 167)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(8, 9, 13, 11, 23, 35, 44, 81, 195)
plot(n_per_sheet, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(8, 9, 13, 11, 23, 35, 44, 81, 195)
plot(n, seconds)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(9, 10, 11, 13, 16, 25, 56, 90, 159)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(8, 9, 13, 11, 23, 35, 44, 81, 195)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(9, 10, 11, 13, 16, 25, 56, 90, 159)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165)
plot(n, seconds)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(72000)
seconds <- c(921)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
# plot(n, seconds)
plot(n, seconds, type='b', xlab='N data rows', ylab='Seconds')
# plot(C, F, type="b", xlab="Celsius", ylab="Fahrenheit", ylim=c(30,130))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
# plot(n, seconds)
# plot(x=n, y=seconds,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#     panel.last = lines(sort(n), fitted(model)[order(n)]))
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
# plot(n, seconds)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
library(model)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(y=seconds ~ x=n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(y=seconds ~ x=n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(y=seconds ~ x=n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(y=seconds ~ x=n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(y=seconds ~ x=n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
#plot(x=n, y=seconds,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#    fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
#plot(x=n, y=seconds,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#      panel.last = lines(sort(n), fitted(model)[order(n)]))
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
#plot(x=n, y=seconds,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#      panel.last = lines(sort(n), fitted(model)[order(n)]))
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
#plot(x=n, y=seconds,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
#      panel.last = lines(sort(n), fitted(model)[order(n)]))
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
fitted(model)[order(n)])
# plot(x=Lat, y=Mort,
# xlab="Latitude (at center of state)", ylab="Mortality (deaths per 10 million)",
# main="Skin Cancer Mortality versus State Latitude",
# panel.last = lines(sort(Lat), fitted(model)[order(Lat)]))
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
slope(plot)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
model
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
model
summary(model)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
model
summary(model)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
?lm
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
summary(model)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance',
panel.last = lines(sort(n), fitted(model)[order(n)]))
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(8, 9, 10, 10, 16, 46, 45, 89, 187, 845)
plot(n, seconds)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model <- lm(seconds ~ n)
summary(model)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model)[order(n)]))
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 72000)
seconds <- c(9, 10, 11, 13, 17, 28, 57, 92, 905)
model <- lm(seconds ~ n)
summary(model)
plot(x=n, y=seconds,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Remote',
panel.last = lines(sort(n), fitted(model)[order(n)]))
source('~/projects/pma-api/test/files/data/ignored/output/regression_template.R')
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
plot(x=n1, y=seconds1,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
lines(x=n2, y=seconds2,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model2)[order(n)]), col='blue')
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
plot(x=n1, y=seconds1,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
lines(x=n2, y=seconds2,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
plot(x=n1, y=seconds1,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
plot(x=n2, y=seconds2,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
plot(x=n1, y=seconds1,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
lines(x=n2, y=seconds2,
xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
# plot(x=n1, y=seconds1,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
#lines(x=n2, y=seconds2,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
library(ggplot2)
ggplot(aes(x=n1, y=seconds1, col=pop)) + geom_point() +
geom_smooth(method="lm", se=FALSE)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
# plot(x=n1, y=seconds1,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
#lines(x=n2, y=seconds2,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
library(ggplot2)
ggplot(data=melt(n1, seconds1), aes(x=n1, y=seconds1)) + geom_point() +
geom_smooth(method="lm", se=FALSE)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
# plot(x=n1, y=seconds1,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
#lines(x=n2, y=seconds2,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
library(melt)
library(ggplot2)
ggplot(data=melt(n1, seconds1), aes(x=n1, y=seconds1)) + geom_point() +
geom_smooth(method="lm", se=FALSE)
# Actual time elapsed by 'n': 'seconds' (for 'R'):
n1 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds1 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model1 <- lm(seconds1 ~ n1)
n2 <- c(90, 180, 360, 450, 900, 1800, 3600, 7200, 14402, 72000)
seconds2 <- c(10, 11, 19, 13, 20, 29, 56, 101, 165, 921)
model2 <- lm(seconds2 ~ n2)
# plot(x=n1, y=seconds1,
#      xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model1)[order(n)]), col='blue')
#lines(x=n2, y=seconds2,
#     xlab='N data rows', ylab='Seconds', main='PMA API Data Upload Performance, Local',
#     panel.last = lines(sort(n), fitted(model2)[order(n)]), col='red')
# library(melt)
library(ggplot2)
# ggplot(data=melt(n1, seconds1), aes(x=n1, y=seconds1)) + geom_point() +
ggplot(aes(x=n1, y=seconds1)) + geom_point() +
geom_smooth(method="lm", se=FALSE)
